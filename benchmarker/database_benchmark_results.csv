query,original_query,database_type,execution_time_ms,cpu_usage_percent,memory_usage_mb,memory_usage_percent,disk_read_mb,disk_write_mb,network_in_mb,network_out_mb,result_rows,result_size_mb,failed
/* SELECT Queries */ /* Basic Select with Limit */ SELECT * FROM data LIMIT 100,"-- SELECT Queries
-- Basic Select with Limit
SELECT * FROM data LIMIT 100",MySQLHandler,4.079103469848633,0.5112378564713256,600.62109375,14.66360092163086,0.0,0.0,0.0017404556274414062,0.006682395935058594,100,0.012714385986328125,False
/* Basic Count */ SELECT COUNT(*) FROM data,"-- Basic Count
SELECT COUNT(*) FROM data",MySQLHandler,7.235527038574219,0.20587903478533376,600.7265625,14.666175842285156,0.0,0.0,0.001556396484375,0.0016908645629882812,1,0.000133514404296875,False
/* Select with Simple Date Range Filter */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01',"-- Select with Simple Date Range Filter 
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",MySQLHandler,74.14841651916504,0.19290140845070422,600.9375,14.67132568359375,0.0,0.0,0.003696441650390625,0.43828678131103516,8760,1.1028785705566406,False
/* Select with Multiple Filters (Date Range and Category) */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0,"-- Select with Multiple Filters (Date Range and Category)
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0",MySQLHandler,58.478355407714844,0.18509410288582184,600.96484375,14.671993255615234,0.0,0.0,0.0027780532836914062,0.2315044403076172,4097,0.5158767700195312,False
"/* Select with ORDER BY and Limit */ SELECT * FROM data ORDER BY CASE WHEN P IS NULL THEN 1 ELSE 0 END DESC, P DESC LIMIT 50","-- Select with ORDER BY and Limit
SELECT * FROM data ORDER BY P DESC LIMIT 50",MySQLHandler,51.81884765625,0.17337926714688381,601.7578125,14.691352844238281,0.0,0.0,0.0015878677368164062,0.005206108093261719,50,0.006420135498046875,False
"/* Get top 50 rows by power output */ /* AGGREGATE Queries */ /* Basic Aggregates */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data","-- Get top 50 rows by power output

-- AGGREGATE Queries 
-- Basic Aggregates
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data",MySQLHandler,32.11188316345215,0.1862492172824045,601.91796875,14.695262908935547,0.0,0.0,0.0016202926635742188,0.0017986297607421875,1,0.000148773193359375,False
"/* Aggregates with Date Range Filter (Corrected: use AND, standard date format) */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'","-- Aggregates with Date Range Filter (Corrected: use AND, standard date format)
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",MySQLHandler,35.52865982055664,0.16541014402003756,602.08984375,14.699459075927734,0.0,0.0,0.00167083740234375,0.0017986297607421875,1,0.000148773193359375,False
"/* Aggregates Grouped by Year with Ordering */ SELECT EXTRACT(YEAR FROM time) AS year, AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' GROUP BY EXTRACT(YEAR FROM time) ORDER BY CASE WHEN EXTRACT(YEAR FROM time) IS NULL THEN 1 ELSE 0 END, EXTRACT(YEAR FROM time)","-- Aggregates Grouped by Year with Ordering
SELECT
    EXTRACT(YEAR FROM time) as year,
    AVG(P) as avg_power_output,
    MAX(P) as max_power_output,
    MIN(P) as min_power_output
FROM data
WHERE time >= '2023-01-01' AND time < '2024-01-01'
GROUP BY EXTRACT(YEAR FROM time)
ORDER BY EXTRACT(YEAR FROM time)",MySQLHandler,37.76979446411133,0.1981191222570533,602.33203125,14.705371856689453,0.0,0.0,0.0018091201782226562,0.0018987655639648438,1,0.000156402587890625,False
"/* JOIN Queries */ /* Simple Self-Join to Calculate Power Change */ SELECT t1.time, t1.P AS power_output, t2.P AS previous_power, t1.P - t2.P AS power_change FROM data AS t1 JOIN data AS t2 ON t1.time = t2.time + INTERVAL '1' HOUR","-- JOIN Queries
-- Simple Self-Join to Calculate Power Change
SELECT
    t1.time,     
    t1.P as power_output,  
    t2.P as previous_power, 
    t1.P - t2.P as power_change
FROM data t1
JOIN data t2 ON t1.time = t2.time + INTERVAL '1 hour'",MySQLHandler,2.335071563720703,0.23430542489808717,602.5,14.70947265625,0.0,0.0,0.001682281494140625,0.00177764892578125,0,0.0,True
"/* WINDOW FUNCTION Queries */ /* Power output changes */ SELECT d.time, P AS power_output, LAG(P) OVER (ORDER BY CASE WHEN time IS NULL THEN 1 ELSE 0 END, time) AS previous_P, P - LAG(P) OVER (ORDER BY CASE WHEN time IS NULL THEN 1 ELSE 0 END, time) AS power_change FROM data AS d","-- WINDOW FUNCTION Queries
-- Power output changes
SELECT
    d.time,
    P as power_output,
    LAG(P) OVER (ORDER BY time) as previous_P,
    P - LAG(P) OVER (ORDER BY time) as power_change
FROM data as d",MySQLHandler,1520.2078819274902,0.3689693941286696,667.97265625,16.307926177978516,0.0,0.0,0.029216766357421875,6.48863410949707,166536,14.61166763305664,False
"/* Running total */ SELECT time, P AS power_output, SUM(P) OVER (ORDER BY CASE WHEN time IS NULL THEN 1 ELSE 0 END, time) AS running_total FROM data ORDER BY CASE WHEN time IS NULL THEN 1 ELSE 0 END, time","-- Running total
SELECT
    time,
    P as power_output,
    SUM(P) OVER (ORDER BY time) as running_total
FROM data
ORDER BY time",MySQLHandler,905.9114456176758,0.1899749373433584,698.12890625,17.04416275024414,0.0,0.0,0.01933574676513672,7.435171127319336,166536,13.34109878540039,False
/* SELECT Queries */ /* Basic Select with Limit */ SELECT * FROM data LIMIT 100,"-- SELECT Queries
-- Basic Select with Limit
SELECT * FROM data LIMIT 100",PostgresHandler,5.173206329345703,0.01593984962406015,147.08203125,7.181739807128906,0.0,0.0,0.0027599334716796875,0.01007843017578125,100,0.012714385986328125,False
/* Basic Count */ SELECT COUNT(*) FROM data,"-- Basic Count
SELECT COUNT(*) FROM data",PostgresHandler,10.032176971435547,0.017622027534418022,148.80078125,7.265663146972656,0.0,0.0,0.0019855499267578125,0.0023717880249023438,1,0.000133514404296875,False
/* Select with Simple Date Range Filter */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01',"-- Select with Simple Date Range Filter 
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",PostgresHandler,28.87129783630371,0.010115805946791862,147.12890625,7.184028625488281,0.0,0.0,0.0078887939453125,0.6929836273193359,8760,1.1028785705566406,False
/* Select with Multiple Filters (Date Range and Category) */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0,"-- Select with Multiple Filters (Date Range and Category)
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0",PostgresHandler,5.188941955566406,0.01654653713569414,148.828125,7.266998291015625,0.0,0.0,0.0020475387573242188,0.002536773681640625,0,0.0,True
/* Select with ORDER BY and Limit */ SELECT * FROM data ORDER BY P DESC LIMIT 50,"-- Select with ORDER BY and Limit
SELECT * FROM data ORDER BY P DESC LIMIT 50",PostgresHandler,4.322290420532227,0.028161603507673036,150.74609375,7.360649108886719,0.0,0.0,0.0019273757934570312,0.0024728775024414062,0,0.0,True
"/* Get top 50 rows by power output */ /* AGGREGATE Queries */ /* Basic Aggregates */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data","-- Get top 50 rows by power output

-- AGGREGATE Queries 
-- Basic Aggregates
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data",PostgresHandler,5.537271499633789,0.015357590966122962,152.16796875,7.430076599121094,0.0,0.0,0.0020227432250976562,0.0024728775024414062,0,0.0,True
"/* Aggregates with Date Range Filter (Corrected: use AND, standard date format) */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'","-- Aggregates with Date Range Filter (Corrected: use AND, standard date format)
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",PostgresHandler,4.470586776733398,0.3779630209965528,154.6875,7.5531005859375,0.0,0.0,0.002140045166015625,0.0024728775024414062,0,0.0,True
"/* Aggregates Grouped by Year with Ordering */ SELECT EXTRACT(YEAR FROM time) AS year, AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' GROUP BY EXTRACT(YEAR FROM time) ORDER BY EXTRACT(YEAR FROM time)","-- Aggregates Grouped by Year with Ordering
SELECT
    EXTRACT(YEAR FROM time) as year,
    AVG(P) as avg_power_output,
    MAX(P) as max_power_output,
    MIN(P) as min_power_output
FROM data
WHERE time >= '2023-01-01' AND time < '2024-01-01'
GROUP BY EXTRACT(YEAR FROM time)
ORDER BY EXTRACT(YEAR FROM time)",PostgresHandler,6.465911865234375,0.017438145944253053,156.36328125,7.634925842285156,0.0,0.0,0.0022115707397460938,0.002655029296875,0,0.0,True
"/* JOIN Queries */ /* Simple Self-Join to Calculate Power Change */ SELECT t1.time, t1.P AS power_output, t2.P AS previous_power, t1.P - t2.P AS power_change FROM data AS t1 JOIN data AS t2 ON t1.time = t2.time + INTERVAL '1 HOUR'","-- JOIN Queries
-- Simple Self-Join to Calculate Power Change
SELECT
    t1.time,     
    t1.P as power_output,  
    t2.P as previous_power, 
    t1.P - t2.P as power_change
FROM data t1
JOIN data t2 ON t1.time = t2.time + INTERVAL '1 hour'",PostgresHandler,4.636526107788086,0.016320400500625783,158.3125,7.7301025390625,0.0,0.0,0.0020847320556640625,0.0025682449340820312,0,0.0,True
"/* WINDOW FUNCTION Queries */ /* Power output changes */ SELECT d.time, P AS power_output, LAG(P) OVER (ORDER BY time) AS previous_P, P - LAG(P) OVER (ORDER BY time) AS power_change FROM data AS d","-- WINDOW FUNCTION Queries
-- Power output changes
SELECT
    d.time,
    P as power_output,
    LAG(P) OVER (ORDER BY time) as previous_P,
    P - LAG(P) OVER (ORDER BY time) as power_change
FROM data as d",PostgresHandler,6.399869918823242,0.019774153074027603,159.734375,7.799530029296875,0.0,0.0,0.0020503997802734375,0.0024728775024414062,0,0.0,True
"/* Running total */ SELECT time, P AS power_output, SUM(P) OVER (ORDER BY time) AS running_total FROM data ORDER BY time","-- Running total
SELECT
    time,
    P as power_output,
    SUM(P) OVER (ORDER BY time) as running_total
FROM data
ORDER BY time",PostgresHandler,15.156030654907227,0.01944253053554651,161.65234375,7.893180847167969,0.0,0.0,0.0019769668579101562,0.0024728775024414062,0,0.0,True
/* SELECT Queries */ /* Basic Select with Limit */ SELECT * FROM data LIMIT 100,"-- SELECT Queries
-- Basic Select with Limit
SELECT * FROM data LIMIT 100",DuckDBHandler,3.0298233032226562,0.002104603820858127,97.76171875,9.547042846679688,0.0,0.0,0.00025844573974609375,0.0,100,0.012714385986328125,False
/* Basic Count */ SELECT COUNT(*) FROM data,"-- Basic Count
SELECT COUNT(*) FROM data",DuckDBHandler,2.135038375854492,0.0043,97.76171875,9.547042846679688,0.0,0.0,6.67572021484375e-05,0.0,1,0.000133514404296875,False
/* Select with Simple Date Range Filter */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01',"-- Select with Simple Date Range Filter 
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",DuckDBHandler,13.978242874145508,0.002105922908179254,97.76171875,9.547042846679688,0.0,0.0,0.00010204315185546875,0.0,8760,1.1028785705566406,False
/* Select with Multiple Filters (Date Range and Category) */ SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0,"-- Select with Multiple Filters (Date Range and Category)
SELECT * FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' AND P > 0",DuckDBHandler,9.24372673034668,0.0019065537786139856,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,4097,0.5158767700195312,False
/* Select with ORDER BY and Limit */ SELECT * FROM data ORDER BY P DESC NULLS FIRST LIMIT 50,"-- Select with ORDER BY and Limit
SELECT * FROM data ORDER BY P DESC LIMIT 50",DuckDBHandler,6.052732467651367,0.001602002503128911,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,50,0.006420135498046875,False
"/* Get top 50 rows by power output */ /* AGGREGATE Queries */ /* Basic Aggregates */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data","-- Get top 50 rows by power output

-- AGGREGATE Queries 
-- Basic Aggregates
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data",DuckDBHandler,2.9909610748291016,0.0016025039123630672,97.76171875,9.547042846679688,0.0,0.0,6.67572021484375e-05,0.0,1,0.000148773193359375,False
"/* Aggregates with Date Range Filter (Corrected: use AND, standard date format) */ SELECT AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'","-- Aggregates with Date Range Filter (Corrected: use AND, standard date format)
SELECT AVG(P) as avg_power_output, MAX(P) as max_power_output, MIN(P) as min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01'",DuckDBHandler,3.368377685546875,0.0016040100250626565,97.76171875,9.547042846679688,0.0,0.0,0.00010204315185546875,0.0,1,0.000148773193359375,False
"/* Aggregates Grouped by Year with Ordering */ SELECT EXTRACT(YEAR FROM time) AS year, AVG(P) AS avg_power_output, MAX(P) AS max_power_output, MIN(P) AS min_power_output FROM data WHERE time >= '2023-01-01' AND time < '2024-01-01' GROUP BY EXTRACT(YEAR FROM time) ORDER BY EXTRACT(YEAR FROM time)","-- Aggregates Grouped by Year with Ordering
SELECT
    EXTRACT(YEAR FROM time) as year,
    AVG(P) as avg_power_output,
    MAX(P) as max_power_output,
    MIN(P) as min_power_output
FROM data
WHERE time >= '2023-01-01' AND time < '2024-01-01'
GROUP BY EXTRACT(YEAR FROM time)
ORDER BY EXTRACT(YEAR FROM time)",DuckDBHandler,1.6720294952392578,0.0019035691922354415,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,0,0.0,True
"/* JOIN Queries */ /* Simple Self-Join to Calculate Power Change */ SELECT t1.time, t1.P AS power_output, t2.P AS previous_power, t1.P - t2.P AS power_change FROM data AS t1 JOIN data AS t2 ON t1.time = t2.time + INTERVAL '1' HOUR","-- JOIN Queries
-- Simple Self-Join to Calculate Power Change
SELECT
    t1.time,     
    t1.P as power_output,  
    t2.P as previous_power, 
    t1.P - t2.P as power_change
FROM data t1
JOIN data t2 ON t1.time = t2.time + INTERVAL '1 hour'",DuckDBHandler,1.56402587890625,0.0018988132417239224,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,0,0.0,True
"/* WINDOW FUNCTION Queries */ /* Power output changes */ SELECT d.time, P AS power_output, LAG(P) OVER (ORDER BY time) AS previous_P, P - LAG(P) OVER (ORDER BY time) AS power_change FROM data AS d","-- WINDOW FUNCTION Queries
-- Power output changes
SELECT
    d.time,
    P as power_output,
    LAG(P) OVER (ORDER BY time) as previous_P,
    P - LAG(P) OVER (ORDER BY time) as power_change
FROM data as d",DuckDBHandler,190.71555137634277,0.0019065537786139856,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,166536,14.61166763305664,False
"/* Running total */ SELECT time, P AS power_output, SUM(P) OVER (ORDER BY time) AS running_total FROM data ORDER BY time","-- Running total
SELECT
    time,
    P as power_output,
    SUM(P) OVER (ORDER BY time) as running_total
FROM data
ORDER BY time",DuckDBHandler,217.00239181518555,0.0019041653617287817,97.76171875,9.547042846679688,0.0,0.0,0.0,0.0,166536,13.34109878540039,False
